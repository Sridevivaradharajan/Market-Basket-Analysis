<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1112.0850                               -->
<workbook original-version='18.1' source-build='2024.3.1 (20243.24.1112.0850)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Association_Rules (grocery_analysis_output)' inline='true' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='grocery_analysis_output' name='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/varad/Downloads/Data_analytics/Groceries dataset for Market Basket Analysis/Preprocessed_data/grocery_analysis_output.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7' name='Association_Rules' table='[Association_Rules$]' type='table'>
          <columns gridOrigin='A1:N114:no:A1:N114:0' header='yes' outcome='6'>
            <column datatype='string' name='antecedents' ordinal='0' />
            <column datatype='string' name='consequents' ordinal='1' />
            <column datatype='real' name='antecedent support' ordinal='2' />
            <column datatype='real' name='consequent support' ordinal='3' />
            <column datatype='real' name='support' ordinal='4' />
            <column datatype='real' name='confidence' ordinal='5' />
            <column datatype='real' name='lift' ordinal='6' />
            <column datatype='real' name='representativity' ordinal='7' />
            <column datatype='real' name='leverage' ordinal='8' />
            <column datatype='real' name='conviction' ordinal='9' />
            <column datatype='real' name='zhangs_metric' ordinal='10' />
            <column datatype='real' name='jaccard' ordinal='11' />
            <column datatype='real' name='certainty' ordinal='12' />
            <column datatype='real' name='kulczynski' ordinal='13' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:N114:no:A1:N114:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>antecedents</remote-name>
            <remote-type>130</remote-type>
            <local-name>[antecedents]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>antecedents</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>consequents</remote-name>
            <remote-type>130</remote-type>
            <local-name>[consequents]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>consequents</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>antecedent support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[antecedent support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>antecedent support</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>consequent support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[consequent support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>consequent support</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>support</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>confidence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[confidence]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>confidence</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lift</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lift]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>lift</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>representativity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[representativity]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>representativity</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>leverage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[leverage]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>leverage</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>conviction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[conviction]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>conviction</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>zhangs_metric</remote-name>
            <remote-type>5</remote-type>
            <local-name>[zhangs_metric]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>zhangs_metric</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>jaccard</remote-name>
            <remote-type>5</remote-type>
            <local-name>[jaccard]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>jaccard</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>certainty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[certainty]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>certainty</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kulczynski</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kulczynski]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>kulczynski</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
      </column>
      <column caption='CleanAntecedent' datatype='string' name='[Calculation_1499417236592562176]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
      </column>
      <column caption='Cleanconsequent' datatype='string' name='[Calculation_1499417236592656385]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
      </column>
      <column caption='Association_Rules' datatype='table' name='[__tableau_internal_object_id__].[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Antecedent Support' datatype='real' name='[antecedent support]' role='measure' type='quantitative' />
      <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Certainty' datatype='real' name='[certainty]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Consequent Support' datatype='real' name='[consequent support]' role='measure' type='quantitative' />
      <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Conviction' datatype='real' name='[conviction]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Jaccard' datatype='real' name='[jaccard]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Kulczynski' datatype='real' name='[kulczynski]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Leverage' datatype='real' name='[leverage]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Representativity' datatype='real' name='[representativity]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Zhangs Metric' datatype='real' name='[zhangs_metric]' role='measure' type='quantitative' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Association_Rules' id='Association!Rules_2CC3D2A27307477FBF9862D983F5FF10'>
            <properties context=''>
              <relation connection='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7' name='Association_Rules' table='[Association_Rules$]' type='table'>
                <columns gridOrigin='A1:N114:no:A1:N114:0' header='yes' outcome='6'>
                  <column datatype='string' name='antecedents' ordinal='0' />
                  <column datatype='string' name='consequents' ordinal='1' />
                  <column datatype='real' name='antecedent support' ordinal='2' />
                  <column datatype='real' name='consequent support' ordinal='3' />
                  <column datatype='real' name='support' ordinal='4' />
                  <column datatype='real' name='confidence' ordinal='5' />
                  <column datatype='real' name='lift' ordinal='6' />
                  <column datatype='real' name='representativity' ordinal='7' />
                  <column datatype='real' name='leverage' ordinal='8' />
                  <column datatype='real' name='conviction' ordinal='9' />
                  <column datatype='real' name='zhangs_metric' ordinal='10' />
                  <column datatype='real' name='jaccard' ordinal='11' />
                  <column datatype='real' name='certainty' ordinal='12' />
                  <column datatype='real' name='kulczynski' ordinal='13' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
    <datasource caption='grocery_analysis_output' inline='true' name='federated.0xpxc670vwr3kl10kfno909q38kh' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='grocery_analysis_output' name='excel-direct.1is08360cali0u1dva9oe0ldli69'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/varad/Downloads/Data_analytics/Groceries dataset for Market Basket Analysis/Preprocessed_data/grocery_analysis_output.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1is08360cali0u1dva9oe0ldli69' name='Frequent_Itemsets' table='[Frequent_Itemsets$]' type='table'>
          <columns gridOrigin='A1:B751:no:A1:B751:0' header='yes' outcome='6'>
            <column datatype='real' name='support' ordinal='0' />
            <column datatype='string' name='itemsets' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B751:no:A1:B751:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[support]</local-name>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias>support</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>itemsets</remote-name>
            <remote-type>130</remote-type>
            <local-name>[itemsets]</local-name>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias>itemsets</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Itemcount' datatype='integer' name='[Calculation_1310266052544532481]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='LEN([Calculation_1310266052545028098]) - LEN(REPLACE([Calculation_1310266052545028098], &quot;,&quot;, &quot;&quot;)) + 1' />
      </column>
      <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
      </column>
      <column caption='Frequent_Itemsets' datatype='table' name='[__tableau_internal_object_id__].[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]' role='measure' type='quantitative' />
      <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
      <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
      <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
      <column-instance column='[itemsets]' derivation='None' name='[none:itemsets:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:itemsets:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;beef&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;cake bar&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;cocoa drinks&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;female sanitary products&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;herbs&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;male cosmetics&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;nuts/prunes&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pasta&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pudding powder&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;syrup&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;canned vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;ketchup&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;mustard&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;snack products&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;spices&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;vinegar&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;brandy&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;chewing gum&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;liquor&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;pickled vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;potato products&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rum&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;soups&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;sugar&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;white wine&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;berries&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;flour&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;frozen meals&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;grapes&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rice&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;turkey&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;candles&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;chocolate marshmallow&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;finished products&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;frozen dessert&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;herbs&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;ready soups&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tea&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;zwieback&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;baking powder&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;dish cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;liver loaf&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pickled vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;processed cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;sausage&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;salt&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sparkling wine&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;flour&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;white wine&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;canned fish&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;Instant food products&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;abrasive cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;cat food&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;kitchen towels&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;organic sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;soap&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;soft cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;spread cheese&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;white bread&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;beverages&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;pot plants&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;rolls/buns&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bathroom cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;chicken&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;curd cheese&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;dishes&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;long life bakery product&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;packaged fruit/vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;condensed milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;flower (seeds)&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;roll products &apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;skin care&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;cooking chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;dessert&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;flower soil/fertilizer&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;frozen potato products&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;oil&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;instant coffee&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;other vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;canned fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pip fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;jam&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;hard cheese&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;packaged fruit/vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;specialty fat&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;candy&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;cling film/bags&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;curd&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;fish&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;frozen fish&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;herbs&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;mayonnaise&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;red/blush wine&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tidbits&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;frozenset({&apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;beef&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;chicken&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;dog food&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;nut snack&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pasta&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;prosecco&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;seasonal products&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;sweet spreads&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;dessert&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;light bulbs&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pet care&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pot plants&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;white bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;cookware&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;ice cream&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;popcorn&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;berries&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;dental care&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;flour&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;frozen fish&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;grapes&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;house keeping products&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;meat spreads&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;red/blush wine&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;specialty bar&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;seasonal products&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;specialty cheese&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;artif. sweetener&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;cereals&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;detergent&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;liquor (appetizer)&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;photo/film&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;pot plants&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;red/blush wine&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sauces&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;softener&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1310266052545028098:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;bottledwater&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;othervegetables,soda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;rolls/buns,soda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;rootvegetables&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;rolls/buns&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;rolls/buns,othervegetables&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;tropicalfruit,wholemilk&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wholemilk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;sausage,wholemilk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;soda&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;yogurt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;yogurt,wholemilk&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;othervegetables&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;othervegetables,yogurt&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;rolls/buns,wholemilk&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;sausage&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;citrusfruit&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;othervegetables,wholemilk&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;soda,wholemilk&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;tropicalfruit&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Frequent_Itemsets' id='Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72'>
            <properties context=''>
              <relation connection='excel-direct.1is08360cali0u1dva9oe0ldli69' name='Frequent_Itemsets' table='[Frequent_Itemsets$]' type='table'>
                <columns gridOrigin='A1:B751:no:A1:B751:0' header='yes' outcome='6'>
                  <column datatype='real' name='support' ordinal='0' />
                  <column datatype='string' name='itemsets' ordinal='1' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Top 10 Frequent itemsets by Support</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='grocery_analysis_output' name='federated.0xpxc670vwr3kl10kfno909q38kh' />
          </datasources>
          <datasource-dependencies datasource='federated.0xpxc670vwr3kl10kfno909q38kh'>
            <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
            </column>
            <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
            <column-instance column='[support]' derivation='None' name='[none:support:ok]' pivot='key' type='ordinal' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([support])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Calculation_1310266052545028098:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' />
              <text column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:support:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</rows>
        <cols>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{8C790915-5FE2-4E1F-99A7-D0E811E8B3D6}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Benton Sans Book'>Association Rules Ranked by Confidence</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='CleanAntecedent' datatype='string' name='[Calculation_1499417236592562176]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
            </column>
            <column caption='Cleanconsequent' datatype='string' name='[Calculation_1499417236592656385]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
            </column>
            <column aggregation='CountD' caption='Antecedent Support' datatype='real' name='[antecedent support]' role='measure' type='quantitative' />
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1499417236592562176]' derivation='None' name='[none:Calculation_1499417236592562176:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1499417236592656385]' derivation='None' name='[none:Calculation_1499417236592656385:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='None' name='[none:confidence:ok]' pivot='key' type='ordinal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([antecedent support])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:confidence:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592656385:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk] / [federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592656385:nk])</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</cols>
      </table>
      <simple-id uuid='{B4B3CDE0-4834-4645-907A-CA8A91E73400}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='CleanAntecedent' datatype='string' name='[Calculation_1499417236592562176]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1499417236592562176]' derivation='None' name='[none:Calculation_1499417236592562176:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' />
              <size column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{DE5C12D2-62F5-44ED-9797-0ACD15A50785}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Frequent itemsets (Size&gt;1) by Support</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='grocery_analysis_output' name='federated.0xpxc670vwr3kl10kfno909q38kh' />
          </datasources>
          <datasource-dependencies datasource='federated.0xpxc670vwr3kl10kfno909q38kh'>
            <column caption='Itemcount' datatype='integer' name='[Calculation_1310266052544532481]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='LEN([Calculation_1310266052545028098]) - LEN(REPLACE([Calculation_1310266052545028098], &quot;,&quot;, &quot;&quot;)) + 1' />
            </column>
            <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
            </column>
            <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1310266052544532481]' derivation='Sum' name='[sum:Calculation_1310266052544532481:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([support])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beef,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beef,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;berries,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;berries,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;candy,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,saltysnack&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;catfood,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chewinggum,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chicken,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chicken,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,creamcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,napkins&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,dessert&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pipfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;detergent,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;flour,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenfish,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenmeals,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;grapes,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;grapes,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hamburgermeat,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hamburgermeat,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;herbs,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;herbs,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hygienearticles,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hygienearticles,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;icecream,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;longlifebakeryproduct,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,potplants&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pasta,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pickledvegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,hardcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;potplants,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;processedcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;red/blushwine,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,catfood&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,detergent&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,ham&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,othervegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,packagedfruit/vegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,processedcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,red/blushwine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,sausage,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,seasonalproducts&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,specialtybar&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,waffles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;semi-finishedbread,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;semi-finishedbread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,rolls/buns,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;softcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,catfood&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,creamcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,flour&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,ham&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,napkins&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,saltysnack&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,sugar&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,waffles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitebread,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitebread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitewine,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,processedcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,detergent&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,wholemilk&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:Calculation_1310266052544532481:qk]' included-values='in-range'>
            <min>2</min>
            <max>3</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:Calculation_1310266052544532481:qk]</column>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' />
              <text column='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</rows>
        <cols>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{09F19AEF-347A-496A-A202-D6F96C5E5611}' />
    </worksheet>
    <worksheet name='Sheet 6'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Top 10 Association rules by Lift</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([lift])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Calculation_1310266052546838531:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</cols>
      </table>
      <simple-id uuid='{A9C9F9E2-C1BD-4DA5-A2BD-9E19197B9042}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{1DB428D1-6F83-4D81-B7CD-B6DC0DB90261}' />
    </worksheet>
    <worksheet name='Sheet 8'>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.617140850017563</max>
          </filter>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</column>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{AF62E27A-A0CB-47B4-929F-3A030A2CE447}' />
    </worksheet>
    <worksheet name='Sheet 9'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Association rules metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.617140850017563</max>
          </filter>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' />
              <size column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</cols>
      </table>
      <simple-id uuid='{2D37836F-8362-4527-993E-95FACBD0261F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759' fontname='Benton Sans Book'>Market Basket Analysis Dashboard using Association Rule Mining</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='850' maxwidth='1650' minheight='850' minwidth='1650' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98118' id='18' param='vert' type-v2='layout-flow' w='99030' x='485' y='941'>
            <zone fixed-size='34' h='4941' id='19' is-fixed='true' type-v2='title' w='99030' x='485' y='941'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='93177' id='7' param='horz' type-v2='layout-flow' w='99030' x='485' y='5882'>
              <zone h='93177' id='5' type-v2='layout-basic' w='89333' x='485' y='5882'>
                <zone h='31055' id='3' name='Sheet 1' w='44659' x='485' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='31055' id='9' name='Sheet 5' w='44674' x='45144' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='33883' id='10' name='Sheet 2' w='44659' x='485' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='33883' id='12' name='Sheet 9' w='44674' x='45144' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='28239' id='15' name='Sheet 6' w='89333' x='485' y='36937'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='93177' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='9697' x='89818' y='5882'>
                <zone h='22902' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type-v2='color' w='9697' x='89818' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='22902' id='11' name='Sheet 2' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type-v2='color' w='9697' x='89818' y='28784'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='15882' id='13' name='Sheet 9' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type-v2='size' w='9697' x='89818' y='51686'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='8588' id='14' name='Sheet 9' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type-v2='color' w='9697' x='89818' y='67568'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='22903' id='16' name='Sheet 6' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type-v2='color' w='9697' x='89818' y='76156'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontcolor='#e15759' fontname='Benton Sans Book'>Market Basket Analysis Dashboard using Association Rule Mining</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1800' minheight='1800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='21' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98118' id='20' param='vert' type-v2='layout-flow' w='99030' x='485' y='941'>
                <zone fixed-size='34' h='4941' id='19' type-v2='title' w='99030' x='485' y='941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='256' h='31055' id='3' is-fixed='true' name='Sheet 1' w='44659' x='485' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22902' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type-v2='color' w='9697' x='89818' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='256' h='31055' id='9' is-fixed='true' name='Sheet 5' w='44674' x='45144' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='232' h='28239' id='15' is-fixed='true' name='Sheet 6' w='89333' x='485' y='36937'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22903' id='16' name='Sheet 6' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type-v2='color' w='9697' x='89818' y='76156'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='33883' id='10' is-fixed='true' name='Sheet 2' w='44659' x='485' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22902' id='11' name='Sheet 2' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type-v2='color' w='9697' x='89818' y='28784'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='33883' id='12' is-fixed='true' name='Sheet 9' w='44674' x='45144' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15882' id='13' name='Sheet 9' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type-v2='size' w='9697' x='89818' y='51686'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8588' id='14' name='Sheet 9' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type-v2='color' w='9697' x='89818' y='67568'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{79464551-8E0D-4121-A8ED-16ADF13B967B}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:itemsets:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:support:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F2A2EFBE-0BDF-4E95-BD1D-B43933EE8110}' />
    </window>
    <window class='worksheet' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052543918080:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:itemsets:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{050377F7-FF6F-48DB-835B-2BB149DDD072}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:antecedents:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DFFB1580-1D03-44B2-9EA4-7D75CA322896}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='2' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type='color' />
            <card pane-specification-id='2' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592656385:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:lift:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:support:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{73B062FD-C30A-4DD3-A4C3-6C3776C00673}' />
    </window>
    <window class='worksheet' name='Sheet 6'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8C903480-F83D-4077-AF92-47CEE6901ECB}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4201C53E-68B3-41DC-A135-76AEFD5E220B}' />
    </window>
    <window class='worksheet' name='Sheet 8'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{A8ABA181-04F0-4671-9B1F-162B7E364949}' />
    </window>
    <window class='worksheet' name='Sheet 9'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CFB1CF72-6CEB-4F33-B081-83B901CB4883}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1'>
          <highlight>
            <color-one-way>
              <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 2'>
          <highlight>
            <color-one-way>
              <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 5' />
        <viewpoint name='Sheet 6'>
          <highlight>
            <color-one-way>
              <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 9'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='3' />
      <simple-id uuid='{AC3E77ED-178B-4719-BDDD-0C60D6D4E149}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      aopOcJFZzf8HE35JGurpUHAAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 6' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
      gg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 8' width='192'>
      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
      tIOZtbQAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 9' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
