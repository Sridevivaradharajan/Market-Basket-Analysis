<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20243.24.1112.0850                               -->
<workbook original-version='18.1' source-build='2024.3.1 (20243.24.1112.0850)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='Association_Rules (grocery_analysis_output)' inline='true' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='grocery_analysis_output' name='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/varad/Downloads/Data_analytics/Groceries dataset for Market Basket Analysis/Preprocessed_data/grocery_analysis_output.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7' name='Association_Rules' table='[Association_Rules$]' type='table'>
          <columns gridOrigin='A1:N114:no:A1:N114:0' header='yes' outcome='6'>
            <column datatype='string' name='antecedents' ordinal='0' />
            <column datatype='string' name='consequents' ordinal='1' />
            <column datatype='real' name='antecedent support' ordinal='2' />
            <column datatype='real' name='consequent support' ordinal='3' />
            <column datatype='real' name='support' ordinal='4' />
            <column datatype='real' name='confidence' ordinal='5' />
            <column datatype='real' name='lift' ordinal='6' />
            <column datatype='real' name='representativity' ordinal='7' />
            <column datatype='real' name='leverage' ordinal='8' />
            <column datatype='real' name='conviction' ordinal='9' />
            <column datatype='real' name='zhangs_metric' ordinal='10' />
            <column datatype='real' name='jaccard' ordinal='11' />
            <column datatype='real' name='certainty' ordinal='12' />
            <column datatype='real' name='kulczynski' ordinal='13' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:N114:no:A1:N114:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>antecedents</remote-name>
            <remote-type>130</remote-type>
            <local-name>[antecedents]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>antecedents</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>consequents</remote-name>
            <remote-type>130</remote-type>
            <local-name>[consequents]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>consequents</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>antecedent support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[antecedent support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>antecedent support</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>consequent support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[consequent support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>consequent support</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[support]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>support</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>confidence</remote-name>
            <remote-type>5</remote-type>
            <local-name>[confidence]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>confidence</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>lift</remote-name>
            <remote-type>5</remote-type>
            <local-name>[lift]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>lift</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>representativity</remote-name>
            <remote-type>5</remote-type>
            <local-name>[representativity]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>representativity</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>leverage</remote-name>
            <remote-type>5</remote-type>
            <local-name>[leverage]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>leverage</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>conviction</remote-name>
            <remote-type>5</remote-type>
            <local-name>[conviction]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>conviction</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>zhangs_metric</remote-name>
            <remote-type>5</remote-type>
            <local-name>[zhangs_metric]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>zhangs_metric</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>jaccard</remote-name>
            <remote-type>5</remote-type>
            <local-name>[jaccard]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>jaccard</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>certainty</remote-name>
            <remote-type>5</remote-type>
            <local-name>[certainty]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>certainty</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>kulczynski</remote-name>
            <remote-type>5</remote-type>
            <local-name>[kulczynski]</local-name>
            <parent-name>[Association_Rules]</parent-name>
            <remote-alias>kulczynski</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
      </column>
      <column caption='CleanAntecedent' datatype='string' name='[Calculation_1499417236592562176]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
      </column>
      <column caption='Cleanconsequent' datatype='string' name='[Calculation_1499417236592656385]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
      </column>
      <column caption='Association_Rules' datatype='table' name='[__tableau_internal_object_id__].[Association!Rules_2CC3D2A27307477FBF9862D983F5FF10]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Antecedent Support' datatype='real' name='[antecedent support]' role='measure' type='quantitative' />
      <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Certainty' datatype='real' name='[certainty]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Consequent Support' datatype='real' name='[consequent support]' role='measure' type='quantitative' />
      <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
      <column aggregation='CountD' caption='Conviction' datatype='real' name='[conviction]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Jaccard' datatype='real' name='[jaccard]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Kulczynski' datatype='real' name='[kulczynski]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Leverage' datatype='real' name='[leverage]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Representativity' datatype='real' name='[representativity]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
      <column aggregation='CountD' caption='Zhangs Metric' datatype='real' name='[zhangs_metric]' role='measure' type='quantitative' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Association_Rules' id='Association!Rules_2CC3D2A27307477FBF9862D983F5FF10'>
            <properties context=''>
              <relation connection='excel-direct.1xdidtl0xtry5a18ai0b40hywgv7' name='Association_Rules' table='[Association_Rules$]' type='table'>
                <columns gridOrigin='A1:N114:no:A1:N114:0' header='yes' outcome='6'>
                  <column datatype='string' name='antecedents' ordinal='0' />
                  <column datatype='string' name='consequents' ordinal='1' />
                  <column datatype='real' name='antecedent support' ordinal='2' />
                  <column datatype='real' name='consequent support' ordinal='3' />
                  <column datatype='real' name='support' ordinal='4' />
                  <column datatype='real' name='confidence' ordinal='5' />
                  <column datatype='real' name='lift' ordinal='6' />
                  <column datatype='real' name='representativity' ordinal='7' />
                  <column datatype='real' name='leverage' ordinal='8' />
                  <column datatype='real' name='conviction' ordinal='9' />
                  <column datatype='real' name='zhangs_metric' ordinal='10' />
                  <column datatype='real' name='jaccard' ordinal='11' />
                  <column datatype='real' name='certainty' ordinal='12' />
                  <column datatype='real' name='kulczynski' ordinal='13' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
    <datasource caption='grocery_analysis_output' inline='true' name='federated.0xpxc670vwr3kl10kfno909q38kh' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='grocery_analysis_output' name='excel-direct.1is08360cali0u1dva9oe0ldli69'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='C:/Users/varad/Downloads/Data_analytics/Groceries dataset for Market Basket Analysis/Preprocessed_data/grocery_analysis_output.xlsx' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1is08360cali0u1dva9oe0ldli69' name='Frequent_Itemsets' table='[Frequent_Itemsets$]' type='table'>
          <columns gridOrigin='A1:B751:no:A1:B751:0' header='yes' outcome='6'>
            <column datatype='real' name='support' ordinal='0' />
            <column datatype='string' name='itemsets' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:B751:no:A1:B751:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>support</remote-name>
            <remote-type>5</remote-type>
            <local-name>[support]</local-name>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias>support</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
            <object-id>[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>itemsets</remote-name>
            <remote-type>130</remote-type>
            <local-name>[itemsets]</local-name>
            <parent-name>[Frequent_Itemsets]</parent-name>
            <remote-alias>itemsets</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
            <object-id>[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Itemcount' datatype='integer' name='[Calculation_1310266052544532481]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='LEN([Calculation_1310266052545028098]) - LEN(REPLACE([Calculation_1310266052545028098], &quot;,&quot;, &quot;&quot;)) + 1' />
      </column>
      <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
      </column>
      <column caption='Frequent_Itemsets' datatype='table' name='[__tableau_internal_object_id__].[Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72]' role='measure' type='quantitative' />
      <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
      <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
      <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
      <column-instance column='[itemsets]' derivation='None' name='[none:itemsets:nk]' pivot='key' type='nominal' />
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:itemsets:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;beef&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;cake bar&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;cocoa drinks&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;female sanitary products&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;herbs&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;male cosmetics&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;nuts/prunes&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pasta&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;pudding powder&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;syrup&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;canned vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;ketchup&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;mustard&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;snack products&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;spices&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;vinegar&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;brandy&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;chewing gum&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;liquor&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;pickled vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;potato products&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;rum&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;soups&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;sugar&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;white wine&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;berries&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;flour&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;frozen meals&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;grapes&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rice&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;turkey&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;candles&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;chocolate marshmallow&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;finished products&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;frozen dessert&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;herbs&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;ready soups&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tea&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;frozenset({&apos;zwieback&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;baking powder&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;dish cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;liver loaf&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pickled vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;processed cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;sausage&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;salt&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sparkling wine&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;flour&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;white wine&apos;})&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;canned fish&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;Instant food products&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;abrasive cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;cat food&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;kitchen towels&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;organic sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;soap&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;soft cheese&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;spread cheese&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;white bread&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;beverages&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;margarine&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;pot plants&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;rolls/buns&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bathroom cleaner&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;chicken&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;curd cheese&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;dishes&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;long life bakery product&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;packaged fruit/vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;chewing gum&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;napkins&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;condensed milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;flower (seeds)&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;roll products &apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;waffles&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;skin care&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;ice cream&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;newspapers&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;cooking chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;dessert&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;flower soil/fertilizer&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;frozen potato products&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;hygiene articles&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;oil&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;semi-finished bread&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;instant coffee&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;other vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;frozen meals&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;butter milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;canned fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;pip fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;hamburger meat&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;jam&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;hard cheese&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;pork&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;packaged fruit/vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;specialty fat&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;detergent&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;candy&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;cling film/bags&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;curd&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;fish&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;frozen fish&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;herbs&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;mayonnaise&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;red/blush wine&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;ham&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;grapes&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tidbits&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;frozenset({&apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;beef&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;chicken&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;dog food&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;nut snack&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pasta&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;bottled beer&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;prosecco&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;seasonal products&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;specialty bar&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;sweet spreads&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;whole milk&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;butter&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;frozen vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;cat food&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;dessert&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;light bulbs&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pet care&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;pot plants&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;chocolate&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;processed cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;root vegetables&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;soft cheese&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;white bread&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;cookware&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;dessert&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;frozen vegetables&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;ham&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;ice cream&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;misc. beverages&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;onions&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;pork&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;popcorn&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;sliced cheese&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;meat&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;specialty chocolate&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;berries&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;beverages&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;candy&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;chocolate&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;dental care&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;brown bread&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;flour&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;frozen fish&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;grapes&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;house keeping products&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;meat spreads&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;bottled water&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;oil&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pastry&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;red/blush wine&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;specialty bar&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;salty snack&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;seasonal products&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;yogurt&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;hamburger meat&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;specialty cheese&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;beef&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;long life bakery product&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;UHT-milk&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;whipped/sour cream&apos;, &apos;onions&apos;})&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;artif. sweetener&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;bottled beer&apos;, &apos;frankfurter&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;bottled water&apos;, &apos;chicken&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;brown bread&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;butter&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;canned beer&apos;, &apos;fruit/vegetable juice&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;cereals&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;canned beer&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;citrus fruit&apos;, &apos;tropical fruit&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;cream cheese &apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;curd&apos;, &apos;sausage&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;detergent&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;domestic eggs&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;frankfurter&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;fruit/vegetable juice&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;hard cheese&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;liquor (appetizer)&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;margarine&apos;, &apos;shopping bags&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;napkins&apos;, &apos;rolls/buns&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;newspapers&apos;, &apos;whipped/sour cream&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;other vegetables&apos;, &apos;yogurt&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;photo/film&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;pip fruit&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;pot plants&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;coffee&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;rolls/buns&apos;, &apos;red/blush wine&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sauces&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sausage&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;shopping bags&apos;, &apos;pastry&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;soda&apos;, &apos;berries&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;softener&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;sugar&apos;, &apos;other vegetables&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;cream cheese &apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;tropical fruit&apos;, &apos;soda&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;waffles&apos;, &apos;whole milk&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;white bread&apos;})&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;frozenset({&apos;yogurt&apos;, &apos;root vegetables&apos;})&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1310266052545028098:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;bottledwater&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;newspapers,wholemilk&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;othervegetables,soda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;pipfruit,rolls/buns&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;rolls/buns,soda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;rootvegetables&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;rolls/buns&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;rolls/buns,othervegetables&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;tropicalfruit,rolls/buns&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;tropicalfruit,wholemilk&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;wholemilk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;sausage,wholemilk&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;soda&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;soda,rootvegetables&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;wholemilk,rootvegetables&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;yogurt&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;yogurt,wholemilk&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;othervegetables&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;othervegetables,yogurt&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;rolls/buns,sausage&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;rolls/buns,wholemilk&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;sausage&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;citrusfruit&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;othervegetables,rootvegetables&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;othervegetables,wholemilk&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;soda,wholemilk&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;tropicalfruit&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='Frequent_Itemsets' id='Frequent!Itemsets_B9CB9F587E534CC0B767FE960A568D72'>
            <properties context=''>
              <relation connection='excel-direct.1is08360cali0u1dva9oe0ldli69' name='Frequent_Itemsets' table='[Frequent_Itemsets$]' type='table'>
                <columns gridOrigin='A1:B751:no:A1:B751:0' header='yes' outcome='6'>
                  <column datatype='real' name='support' ordinal='0' />
                  <column datatype='string' name='itemsets' ordinal='1' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </object-graph>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Top 10 Frequent itemsets by Support</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='grocery_analysis_output' name='federated.0xpxc670vwr3kl10kfno909q38kh' />
          </datasources>
          <datasource-dependencies datasource='federated.0xpxc670vwr3kl10kfno909q38kh'>
            <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
            </column>
            <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
            <column-instance column='[support]' derivation='None' name='[none:support:ok]' pivot='key' type='ordinal' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([support])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Calculation_1310266052545028098:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' />
              <text column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:support:ok]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</rows>
        <cols>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{8C790915-5FE2-4E1F-99A7-D0E811E8B3D6}' />
    </worksheet>
    <worksheet name='Sheet 2'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontname='Benton Sans Book'>Association Rules Ranked by Confidence</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='CleanAntecedent' datatype='string' name='[Calculation_1499417236592562176]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
            </column>
            <column caption='Cleanconsequent' datatype='string' name='[Calculation_1499417236592656385]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&apos;&quot;, &quot;&quot;), &quot;&apos;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;)' />
            </column>
            <column aggregation='CountD' caption='Antecedent Support' datatype='real' name='[antecedent support]' role='measure' type='quantitative' />
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1499417236592562176]' derivation='None' name='[none:Calculation_1499417236592562176:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1499417236592656385]' derivation='None' name='[none:Calculation_1499417236592656385:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='None' name='[none:confidence:ok]' pivot='key' type='ordinal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='COUNT([antecedent support])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:confidence:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592656385:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk] / [federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592656385:nk])</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</cols>
      </table>
      <simple-id uuid='{B4B3CDE0-4834-4645-907A-CA8A91E73400}' />
    </worksheet>
    <worksheet name='Sheet 3'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Frequent itemsets (Size&gt;1) by Support</run>
            <run>Æ&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='grocery_analysis_output' name='federated.0xpxc670vwr3kl10kfno909q38kh' />
          </datasources>
          <datasource-dependencies datasource='federated.0xpxc670vwr3kl10kfno909q38kh'>
            <column caption='Itemcount' datatype='integer' name='[Calculation_1310266052544532481]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='LEN([Calculation_1310266052545028098]) - LEN(REPLACE([Calculation_1310266052545028098], &quot;,&quot;, &quot;&quot;)) + 1' />
            </column>
            <column caption='Cleanitem' datatype='string' name='[Calculation_1310266052545028098]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='REPLACE(REPLACE(REPLACE(REPLACE(STR([itemsets]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot; &quot;, &quot;&quot;)' />
            </column>
            <column caption='Itemsets' datatype='string' name='[itemsets]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_1310266052545028098]' derivation='None' name='[none:Calculation_1310266052545028098:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1310266052544532481]' derivation='Sum' name='[sum:Calculation_1310266052544532481:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([support])' function='order' user:ui-marker='order'>
                <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beef,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beef,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;berries,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;berries,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;beverages,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledbeer,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;bottledwater,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;brownbread,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;butter,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;candy,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,saltysnack&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;cannedbeer,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;catfood,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chewinggum,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chicken,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chicken,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;chocolate,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,creamcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,napkins&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;citrusfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;creamcheese,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,dessert&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pipfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;curd,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;dessert,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;detergent,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;domesticeggs,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;flour,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frankfurter,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenfish,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenmeals,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;frozenvegetables,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;fruit/vegetablejuice,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;grapes,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;grapes,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;ham,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hamburgermeat,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hamburgermeat,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hardcheese,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;herbs,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;herbs,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hygienearticles,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;hygienearticles,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;icecream,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;longlifebakeryproduct,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;margarine,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;misc.beverages,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;napkins,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;newspapers,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;oil,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;onions,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,potplants&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;othervegetables,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pasta,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pastry,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pickledvegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,hardcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,margarine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pipfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;pork,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;potplants,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;processedcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;red/blushwine,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,catfood&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,detergent&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,ham&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,othervegetables,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,packagedfruit/vegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,processedcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,red/blushwine&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,sausage,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,seasonalproducts&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,specialtybar&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,waffles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rolls/buns,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;rootvegetables,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;saltysnack,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sausage,yogurt,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;semi-finishedbread,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;semi-finishedbread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;shoppingbags,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;slicedcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,grapes&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,hygienearticles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,icecream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,rolls/buns,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;soda,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;softcheese,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtybar,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,citrusfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,tropicalfruit&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;specialtychocolate,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;sugar,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,bottledbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,bottledwater&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,cannedbeer&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,catfood&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,chocolate&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,creamcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,domesticeggs&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,flour&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,frozenvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,fruit/vegetablejuice&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,ham&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,napkins&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,newspapers&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,pork&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,rolls/buns&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,saltysnack&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,shoppingbags&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,sugar&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,UHT-milk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,waffles&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,whipped/sourcream&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;tropicalfruit,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;UHT-milk,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;waffles,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,brownbread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,butter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,frankfurter&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,onions&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,othervegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,pastry&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,sausage&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whipped/sourcream,yogurt&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitebread,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitebread,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;whitewine,wholemilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,meat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,processedcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;wholemilk,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,beef&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,berries&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,buttermilk&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,candy&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,chewinggum&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,chicken&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,coffee&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,detergent&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,frozenmeals&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,hamburgermeat&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,longlifebakeryproduct&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,rootvegetables&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,soda&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,softcheese&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,whitebread&quot;' />
                  <groupfilter function='member' level='[none:Calculation_1310266052545028098:nk]' member='&quot;yogurt,wholemilk&quot;' />
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:Calculation_1310266052544532481:qk]' included-values='in-range'>
            <min>2</min>
            <max>3</max>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:Calculation_1310266052544532481:qk]</column>
            <column>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' />
              <text column='[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</rows>
        <cols>[federated.0xpxc670vwr3kl10kfno909q38kh].[sum:support:qk]</cols>
      </table>
      <simple-id uuid='{09F19AEF-347A-496A-A202-D6F96C5E5611}' />
    </worksheet>
    <worksheet name='Sheet 4'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Top 10 Association rules by Lift</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]'>
            <groupfilter count='10' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
              <groupfilter direction='DESC' expression='SUM([lift])' function='order' user:ui-marker='order'>
                <groupfilter function='level-members' level='[none:Calculation_1310266052546838531:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
              </groupfilter>
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</cols>
      </table>
      <simple-id uuid='{A9C9F9E2-C1BD-4DA5-A2BD-9E19197B9042}' />
    </worksheet>
    <worksheet name='Sheet 5'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#000000'>Association rules metrics</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Association_Rules (grocery_analysis_output)' name='federated.0pqp8wr14k03y81bjq73c1s31zhv' />
          </datasources>
          <datasource-dependencies datasource='federated.0pqp8wr14k03y81bjq73c1s31zhv'>
            <column caption='Rule' datatype='string' name='[Calculation_1310266052546838531]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='&quot;Rule: &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([antecedents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;) + &#13;&#10;&quot; → &quot; + &#13;&#10;REPLACE(REPLACE(REPLACE(REPLACE(STR([consequents]), &quot;frozenset({&quot;, &quot;&quot;), &quot;})&quot;, &quot;&quot;), &quot;&apos;&quot;, &quot;&quot;), &quot;}&quot;, &quot;&quot;)' />
            </column>
            <column caption='Antecedents' datatype='string' name='[antecedents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Confidence' datatype='real' name='[confidence]' role='measure' type='quantitative' />
            <column caption='Consequents' datatype='string' name='[consequents]' role='dimension' type='nominal' />
            <column aggregation='CountD' caption='Lift' datatype='real' name='[lift]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1310266052546838531]' derivation='None' name='[none:Calculation_1310266052546838531:nk]' pivot='key' type='nominal' />
            <column-instance column='[confidence]' derivation='Sum' name='[sum:confidence:qk]' pivot='key' type='quantitative' />
            <column-instance column='[lift]' derivation='Sum' name='[sum:lift:qk]' pivot='key' type='quantitative' />
            <column-instance column='[support]' derivation='Sum' name='[sum:support:qk]' pivot='key' type='quantitative' />
            <column aggregation='CountD' caption='Support' datatype='real' name='[support]' role='measure' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' included-values='in-range'>
            <min>1.0</min>
            <max>1.617140850017563</max>
          </filter>
          <slices>
            <column>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <encodings>
              <color column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' />
              <size column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' />
              <text column='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</rows>
        <cols>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</cols>
      </table>
      <simple-id uuid='{2D37836F-8362-4527-993E-95FACBD0261F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontcolor='#e15759' fontname='Benton Sans Book'>Market Basket Analysis Dashboard using Association Rule Mining</run>
          </formatted-text>
        </title>
      </layout-options>
      <style />
      <size maxheight='850' maxwidth='1650' minheight='850' minwidth='1650' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='98118' id='18' param='vert' type-v2='layout-flow' w='99030' x='485' y='941'>
            <zone fixed-size='34' h='4941' id='19' is-fixed='true' type-v2='title' w='99030' x='485' y='941'>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='4' />
              </zone-style>
            </zone>
            <zone h='93177' id='7' param='horz' type-v2='layout-flow' w='99030' x='485' y='5882'>
              <zone h='93177' id='5' type-v2='layout-basic' w='89333' x='485' y='5882'>
                <zone h='31055' id='3' name='Sheet 1' w='44659' x='485' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='31055' id='9' name='Sheet 3' w='44674' x='45144' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='33883' id='10' name='Sheet 2' w='44659' x='485' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='33883' id='12' name='Sheet 5' w='44674' x='45144' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='28239' id='15' name='Sheet 4' w='89333' x='485' y='36937'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
              <zone fixed-size='160' h='93177' id='6' is-fixed='true' param='vert' type-v2='layout-flow' w='9697' x='89818' y='5882'>
                <zone h='22902' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type-v2='color' w='9697' x='89818' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='22902' id='11' name='Sheet 2' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type-v2='color' w='9697' x='89818' y='28784'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='15882' id='13' name='Sheet 5' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type-v2='size' w='9697' x='89818' y='51686'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='8588' id='14' name='Sheet 5' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type-v2='color' w='9697' x='89818' y='67568'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
                <zone h='22903' id='16' name='Sheet 4' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type-v2='color' w='9697' x='89818' y='76156'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                  </zone-style>
                </zone>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <layout-options>
            <title>
              <formatted-text>
                <run fontcolor='#e15759' fontname='Benton Sans Book'>Market Basket Analysis Dashboard using Association Rule Mining</run>
              </formatted-text>
            </title>
          </layout-options>
          <size maxheight='1800' minheight='1800' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='23' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98118' id='22' param='vert' type-v2='layout-flow' w='99030' x='485' y='941'>
                <zone fixed-size='34' h='4941' id='19' type-v2='title' w='99030' x='485' y='941'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='256' h='31055' id='3' is-fixed='true' name='Sheet 1' w='44659' x='485' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22902' id='8' name='Sheet 1' pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type-v2='color' w='9697' x='89818' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='256' h='31055' id='9' is-fixed='true' name='Sheet 3' w='44674' x='45144' y='5882'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='232' h='28239' id='15' is-fixed='true' name='Sheet 4' w='89333' x='485' y='36937'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22903' id='16' name='Sheet 4' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type-v2='color' w='9697' x='89818' y='76156'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='33883' id='10' is-fixed='true' name='Sheet 2' w='44659' x='485' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='22902' id='11' name='Sheet 2' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type-v2='color' w='9697' x='89818' y='28784'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='33883' id='12' is-fixed='true' name='Sheet 5' w='44674' x='45144' y='65176'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='15882' id='13' name='Sheet 5' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type-v2='size' w='9697' x='89818' y='51686'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone h='8588' id='14' name='Sheet 5' pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type-v2='color' w='9697' x='89818' y='67568'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{79464551-8E0D-4121-A8ED-16ADF13B967B}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.25' source-height='63'>
    <window class='worksheet' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:itemsets:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:support:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F2A2EFBE-0BDF-4E95-BD1D-B43933EE8110}' />
    </window>
    <window class='worksheet' name='Sheet 2'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:antecedents:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:confidence:ok]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:confidence:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{DFFB1580-1D03-44B2-9EA4-7D75CA322896}' />
    </window>
    <window class='worksheet' name='Sheet 3'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052543918080:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:itemsets:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{050377F7-FF6F-48DB-835B-2BB149DDD072}' />
    </window>
    <window class='worksheet' name='Sheet 4'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8C903480-F83D-4077-AF92-47CEE6901ECB}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 5'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:support:qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
            <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[sum:lift:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CFB1CF72-6CEB-4F33-B081-83B901CB4883}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Sheet 1'>
          <highlight>
            <color-one-way>
              <field>[federated.0xpxc670vwr3kl10kfno909q38kh].[none:Calculation_1310266052545028098:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 2'>
          <highlight>
            <color-one-way>
              <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1499417236592562176:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 3' />
        <viewpoint name='Sheet 4'>
          <highlight>
            <color-one-way>
              <field>[federated.0pqp8wr14k03y81bjq73c1s31zhv].[none:Calculation_1310266052546838531:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='Sheet 5'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{AC3E77ED-178B-4719-BDDD-0C60D6D4E149}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      +gAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 2' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nOy9WXMjWZbn93N37PtGgPtOBslgrBm5VtZUzxeQ6QvJrB71IJOZXvSgd5lM
      Ni0z2UxPz3SXqruqc4uFwX0BSRAgQOw7iB2+6YFRUclqZlVmJJGxAL+XzAAdf7/ujuP33nPP
      PUfQdV1nyJABRXzbDRgy5G0yNIAhA83QAN5DisXi227CB8PQAIYMNEMDGDLQDA1gyEAzNIAh
      A83QAIYMNEMDGDLQGL7/j6F77f2g0Wi87SZ8MAjDUIj3j91wDN1o64u2qihIBsPfPvAd1H8T
      7f5dKVArZDH5RrFKkM1mGR0d7efpfjKlbBbX6CjGG/6WSCaZnpz8UTr5dAbPiJtiqYXDqGBw
      jWK7SfSW+Menp3x3Uu7fCQaIH5gD6Jwf73IYTdGpl9l4/pxU8ZJuvU7i/JTN/VN0XSaXTLL5
      YoNaR0FuX/LyxQalRhddUwjvbPByc4e2eqV4ET3i5YsNLjsqqtxi5+ULsuXm1bG7m8TSJTS5
      SbFQJBJP3/qFVssleopG+jxGR7sa7hWzOaKRA46iqas2Rg7YDcfQgGQyia5rxMK7hGNp/tRN
      5jMJtjdekM5m2dzcoS1riEYDutwmky1RL2dpyTqFfB512Lm+89xoAPmzA5q2MaaDHnq9Hk6X
      i63Nl9SLSUo9M0GtQrrT4Sh8wdr6PCcHZ7x8/hyLw8p333zHyd4Wrpk1Zsf8rzVVjNy7t8L2
      y5fsbzwHi53N777mZO8lFc1MZPs7CpUCX784YWw0eOsXqtUynBdKXMQOiaUqJBIpBKWF2TuN
      VkiRSx+RU/2M2dscRHIAVBMHRCsaucg2F8UWAGdnUZbXF9neDDM35SKeKBOLnKH+6TqVLofb
      L2ioxqGH4T3gxmfU7qh43Q6sVgsX53HMDieioAEmgiEfNqsZTQNvIIjFasUsaXQVDa/Xz5NH
      92gqAiNOC4LwZ02rzY7RaMFkEGj0FHxeH48/ekyv1cHr87L++Akuk8jC8gp28+2PzLyTk2SO
      wgQWHtKKb2DyjoPBTsjvxGo20251cHpd2J0etF776j40Gzi9PpbXHzPiMgFgc3mwWSz4vB5M
      FjMS19/ygiAhoaMLItduwJB3khsNYGppgdTRNrvH53g8TjLJFA6XF7PdjtVowOTwYDMY8Hgc
      gITb42ZtaY7o2RmlyxZ35sZ4+u1TCi0d06szGNQW3377HRPzK6yvLhGPnpErX7KwvkYpESWV
      LYLRhtth6suFCkYPbqdAIBDCaHYzNebG6XEjAQ6Ph9DcKo3oFtvhFPMLU/j9fkIL62ilBPFU
      Fu3V79zj9gASfr8Hg8GKw27G5/cjSSa8Hid2d4B7jz9GrqaR1eEQ6F1n6AV6D/m3jSPqcp88
      KaqKJEl90e63/ptoXzOA4TrA+0Gj0cDhcPRFe9AM4NprJBAI3GqD3nc0TaHR7OJy2t92U65x
      WmzTVvrTA+iaiCD2b/reT/030b7xLnbyJ1wIMyyNmP+mQCcXJiktsBj4nuNbU9g7jnBvdeUn
      NeZtEAnv4p1cIn50yMMnHyF+b95az8bIVjvk/Asshfqz8PQmVFoKBa37tpvxQXDza0RTCe+/
      IC32uPvZbyidvqRw2WZy6TGdcozGZZ351Xsc720j1/OMPJ4HdDKxMJFkiamFFfIXEb4t5XGN
      LTJqaXMSz2Jxj7I0ZuMgHEMzO7k742Pn4Ax3cJL5kIX9cAzB7ObJo7sYxNv1oPTKcTZjFRwu
      P4ZmmkK9S2hmBVQFXQdFUeheFtjYOcTqCfF4/Q7JUoe5kJl/3dsiedDl4ee/InUaY/3+Cnt7
      u7gFhXijh64Z+OjuFM83w7hHxnm4vjR0gb4n/OBzWr73hM/WJ8jX2mi6iCBoJM4T1Gs1Vh59
      RrucZm7tCR8/XL16a+oqqUKbL778ktlRD/6xOb747COUdovjwzAaAoVCllj4gJYKtWKRjqJg
      NFtxOuzEDo7o6AK1apFOT/2hZr0xmtwBW5DVOT91xcKvv/ycSiZx7Rhd1zEYLbicDuRWGdHu
      QwQW1h7y689XiJ4kaTSbADSbDVRF4sFnnzHpNtBWNCSTBZfj3RouDfnr/O2BpFKn2BCZHQ9y
      llUx2t04zBI9k5FYKkmjl0OfXAJEzKJMMp3GZb8+QXO53VhHZzEbRJTKBYIxiMtqxG4xMT4x
      SvIiStDtwm8N4bUZMBv78/70eD2IohG1c0kymUAz2IDOnw8wmpiYGOc8kcDQcxOcXIbmOZeV
      IpFsCs/4XbLhFKlElHpXJ2T5nrhoZmZ6gsx5jLGpcez9m0cOuUVudINqvRYdLFjo0MFMq5yh
      I5hx2WyIAjgcdtA1cukkqmjE4w9hM4loSofERQZfaBxRV3DYLDRaPawmgWQyjdU9wojbQjqV
      BLOLkNdOKpXG7g3id5pffe5mPOhFuOVFpKtrMmMzSbQbFTKFSyYmJ9F6bQxmK51WC7vNTDqV
      wuDwUkhdcPf+PZC7JNMpRIubyZCfWilLtQ0elw2zKGJwOFCaDSSTkUwqhcU1QtDnvNW2/yX/
      uBWjoL47c5L3meE6wE2obcp1HZ/n3fyRFYvFvnnsZFnGaOxfJF8/9d9Eu6/RoO8tkhWf5203
      4ofpKRrNPsyTAGRZw6j3R7vf+m+iPfAG0KhXMVldmAy/lN9Go1Kp4/W6r85fLiC5R7D+hDnD
      drpJITnsuG+DAfLW6RSzSdKFCt3WJf/wD/+F81SOYvaCZCpNplBB13UqhQzpXAldU2g2WxTy
      BTQdGvU6OtBrN+gqGsVskmyxCkC9UuD8/IJGu0ev3SAeT9CRZba//iee7p7Q7CrkM0kS6Ty6
      rhA9OeH8PEFH0SicR6jJ0GlUOU8kkTWd1mWZ2HmC7jCWqO8MTA9QuYgQq+k4unEaoysYjAas
      ZhPNSpuaYieZvMDONKfxPEK7gizc4+jlFkvrD/ADlUSY2vQjKseHjAS9RMs9xPop6vIKkbM0
      MyEjx6caYieJxeHm5XYFj9GIbrYiaT2ql00a+UM026/ptNsYRZmX24eMiwA9dncOcLptbO93
      UC8TBCfmaHdkzPb+BAcOuWJgeoBypcHM3AwLixM0LhXcbg+hgBfRbGN2Zhqvy8FlpcBls4vZ
      HcBlEglNLbIwFUIUYGJpiXR4m7bkop3P0FUVrN4g5naBwOwao6EAoq6QzeSQFY3RUAiXx0Ug
      GEJrVihWa2hqh8plB6cnwMT0PAbtao8BSoNMvo6sSYSCXpYWFqlXCxTLw72//WZgDGB6YZrw
      xlO+206ytDCC26jzbPcYk9mCJApYrBZGJmYx06HRaKCLBmzWPzv6BaMboVlhdHaKqdU11GqZ
      ZquNKThP7eQpLzb3kTGwMDtB7bJOT9Fwe/yc7Dyl1gO506GnGbCaJLr1Al/98Q/4J5cw2WwY
      jV7mJuxc1hsoqk6xkKPR7GAwDkwH/dYYukF/LkqL58+36PR6zN79mOmR/kRpfp+Xp0lUs6sv
      2qqmIfUxGK6f+m+iPQyHfg8ZhkPfnvawB3gPyT77T3h7ib994BugqhqS1MceoI/6b6J94yCz
      VzonI4wz4/thD0Q5l0S3+PG7rT+tle8pxVwOTyj0TrjNlItn9C7+e9/0+7cM1n/9n6p94/PU
      5Dbh0x0ukLn/yWeUzw/IlOosrH9Es5igXqlh99hJhc+RLA6ePFrmYHsH2ejio/trGKR3bzN4
      NhHDFpxCqCZpWkfInuzRVEQefvSEcuKIi/wldl+IgKjhXV6kEj3FNR4kGb6gazBwvvcCz9xd
      Pnl8H5vpXTCDIbfBD/YXY7N3+GjRQzKbZvMgjqp0OT6JkE0lmFq5h8NoYH71ASsBjbN0lcuO
      Rmgk8M4mQvB7zERiGaKpElohjn1qhU/ujXO4d0imJvHZ55/RqmSpFYvIQK1UpKu0yVUU1tfu
      MDO7xKefPR7++D8wftAAzCYToiSBYMDtD/HZr77k/vIMVncAr90MCIgClKotHA4nDx+sU46d
      UOnKv2DzfzxG1xhiNYJs9WK3GGjUm7QuL5FsDpReG7XbpCPrCIKG3OtRqtQAgeDoKAZRQNIV
      urLGcMr0YXGjARjdY4y6jBico4wFAjy+E2LjxTa6wcTU5BQAbr+fbOwQYWSJSa+F/EUUY3AK
      n6WPOQF/FgI+t4uR0CiuiSUCQoVoxcyjlWnmRu283AsjGows3F8hurXD5J11HGYX42NX7sbV
      R+ucbO/QVrS3fB1DbpOB8QL1GmXCF2XurixyfYqiET8+IFVpsbz2gIDL8kMS7wyFi1P8fcqf
      JCsKxj4mx+2n/ptoD4wBfEgM9wPcnvZAz+g6rRYmm+3GcWC90cD5IxebGpeXWB02Oh0Fo6gh
      mGz0aVcnAN1/+1+op37XH3EdOv10ZPRT/w20B8YAVEVBkCTUXg/JZEZTFRInEUKrS5iRsJhN
      9LptVF3EYjGzt7/P559+Sq/bQRcMmM1GBECWe6/eNCZkWcZitaJpGkqnRvikyKi9jXniAR7j
      Va76297aCaBrCijDtCi3wcAYQOZ0H8YWiX31j0x8+T9Sie7h0LscHR3TLl7y5JMlXmydYzfK
      hBYeAdCtptmO5NF6TVYefIrPYeTpV7/H6fGQSDUYDZjwTT2kchHm7oOl1+e6LFyQbMrcX53n
      HfUKD3nFwESDjk+HuAhHCKw+on62iWQNIhgcPHj4kJmAm1wqxdzDJzx8sEa1cJUevZCIUqy3
      0DCgc+X9cQXGePj4IcHACHfXl9C7vWvnUbpNXm4fMT07jfiuLooMec3AGIBoD9EsneHzT1LJ
      5wlNBF6n0RNFkcDMLNEXX/P0xR7B8QlEUWRkeg6j0kU0GDFJfz72T/8VEBAE4er/BQFJFDBa
      nfzmN19ysrdDb7ij651n6AV6D8n8y/+Ou7bbF21d0/qcG7R/+m+iPQyHfg8ZhkPfnvawB3gP
      KZ5tEbD2Z0VaUVUMfTSAfuq/ifaP8gJlMmlCDoFYy8VC6EPNfdkkEe8wPeP/24e+bfJ70In0
      RbrfbsF+6r+J9o3f0dUeh7s79Iwe7q8toqoqeqdFoW5+bw1A7VyytXOIIzjN0oSHg719sI+w
      fmeGdOyEi0IaybSI3VTnJJZh5s464/7+pjgc8va5ccaQPjnCOnmHaUebcPKSZPLil27XrVPN
      XNCSHIT8LmKnRwTm7uJTMpycJ8l2zHz65D4mQUDXdERBY3Nr5203ecgvwI0GoOk6giAgiOIH
      E/7rHJvjwcIozze20PWrAo6iKKDICgajEbXXQ9UVIrEM9x88wGr8MK57yF/nRgOYWF6hnjgi
      VjWwMuVmfHwCweZj3PvuR0r+EJrS4fQkwuTMHPNLd8id7ZPTg6wtTmPrFtg7zRMMepgIudgP
      RxmfmHjbTR7yCzD0Ar2HFOOHBBz9mU4qioKhj+HQ/dR/E+2BiQX6oLAHwd+fcGhdlqGP4dD9
      1H8T7YE3AE1VEV6FMvwy6K/Sd0ivzq+AaOAnlURLfA3RVF9aZ0CHPobw9VP/TbQH1gCOT465
      s3yHRPQI98QKXtvt34pi6gzcM38xXJE52Itw/+EaAPGdF1jXPmf0p0yvupfQyd1qW/9Ev18D
      /dR/E+2BMYBONct322EEDRZWlnjx7Bm1tk5AarK98YyOovMfP7nL7v4RrbbM/Sf3Odzex2D3
      8uThOrHdlwTvPqZ0vIUjNMHJ6RmqrPHo40fsPn+GJui4Qis41Bz5ShNHcJzK8QZ1a5ovPn5A
      NHxAvd7k3q9+TTkX59uvcliDi1zV4dA43HpBudlhZGqNVuaAlmpk6d4Tgq6/Xap2yJszMNGg
      yUSG9Y+/4IsncxSqEgtLS3zyYAXRbOfhk0+ZHHFTzCQo1ToYBIV6s4dg8fHp43UMIszMBzk7
      iVNqC7TiEZqajiCoVC5O8C5/zicfraJ3O5yeREEQaTdl5pcXePDRpziNKrKiInRLpEodfKEZ
      vvj139G7zFw1TqlyclZAEAy0WnWcThfGYWLcX4SBMYBQ0Et4f5ed3RjBcS+i3OIoen2Bz+3x
      Y7Fa8AZGcNtM2G32192q0TlBM/4S+/gMwckgEmb8gRF8oQlyJ1uEj8+QMRAIeHG4PYwEvJhN
      ZmInhxTyZTSjFaf9avdYo1pgb/slBturiazBScBrwe3xEPB6kIxmbFaJfKb8y96kAWSA3KA6
      rUYdVTDitFuRu21aPQ271YQoGlDVKxdap9Wkp4LTYUNRNUyv38Q63XYHyWzBIEKrUUfRJRxW
      ibOzBJ12Ccm5xJ1pF/VmC6vdgUkSqNfrWO1Ouq0GosGIwWRB7TbpKjpOlxNd7iEYzehyh0ar
      i83hRFc6tLsKTpcT6YbJeXHj7wnI/Vmd7+8UuL/6b6I9DIf+2WhkLhJ0MTM9OfbTvDlvyDAc
      +va0B6gH+HA4iO0j2vpjaapytZm/X/RT/020f9TR6UyG8bGxf/e50m2ws73H/L1P8Nr+veVd
      lrKIjhFMqBjNpndyg3ipkMXq8lMt5BmbmLiW27TXLBBLlPFPzRHoUyKqN+Gfwv/ARuHp227G
      B8GNk2C1XSMSOWUvHEMDTEYjutLk7OSYvaMIig6gsPP177moKXTadaqFLBe5IsViGV3TKJVK
      iJKE2izx//z937O5f9r3tNt/DbVzSalS4fwiS6OcZXN7j2ZXpZRP0+opJC+S6JrM8f42J/EM
      ug7JeAa/W+AofMxuOIqOSrF4NTEtFgs0yiWikSNO41k0VSa8u0nkIsewS31/uNEA5FqasuYi
      ZK5xdF7lNHKK1imRqZsI2hSOYxlAYmJqnJV7j9BqCbZP84QCNiKn5+iawlksSuHilLbRz+zM
      LHdX5t6qy0muZXi6c4bf72L3MMry/Bjb2/vXjrnMXVDqGvA6zGhKmyZWHAYwOwOMWS7ZixaJ
      nMYAiEROyZ4do7vH6BbiFLNRsj0bHptpaADvET/4m3S53Tg8btTuqwRMgoDL5cbucKGrMiAg
      SiIGgxHBYGF1Zekqc4Kuo6kK6p927Akioij2dZvdj2Xhzhp2k4DBZMVmdyLpyrW/O0YmmA06
      OTw6oZTL4RkJAeByuXB63Kid7rXrk4x2RkY82KxmzL4ZloIWTsPHdIf5c98bftAATvY22Dou
      s7wYxOfzga5zdrTF7mmKuZlJAMx2D3aTiMXmwGySADN2U4eN7T2sTi82lw+LAYJeM5s7x7zN
      34VoduC0SoiShRGnwLdPNxibncfh9GAyiHh9PuROg2QyjcXholiqEfS7kCxuCtEdNg6LrN6Z
      wmWReb6xhcXpw+Z2YwDsLjd6p04ilcHk8GB8Fyc7Q27kRi9QtxgjI4wz6//zMrzWzhIpWFme
      dv+iDXwrqC1Oz8ssLUy+7ZbcyFcHf6AhXPZFe6CrRA55Pxhmh7497WHAyXvIHyO/J3kQ74u2
      pmmvs9+9b/pvoj2wBhBPxJmZnuEiGsY1toTbevuT9Fohie4Yw3NNW+ZwP8ba+jIAib0NLMtP
      CP6EoM94JTZcB7glBsYAlHaF717soWNgZXWer/74R3L3PyEg1dh88RRNNPEfnqyyu7dPo63z
      5ON1zsIRWrqRJw/XiR/tM7Z6l2r0CPPIGCcHRygYePLJIw6ff0tL0RmZWsWmFEjmqvinZsnu
      fkPdOv46HLrZlnn0xafkU2dUK2l803cxyzKarhM52CJbaTC1+JBW9pByUx2GQ/8CDEw0aOL0
      nDsffcpn98dIlsR/Fw4ddFvIJ2MUKi1EuUq61KTU1F+HQ0+MWTmJ5EiV2zTOwtR1HbVTJXW6
      j3H6CR8/XqZ92eTo8BgEyGZKzL0Kh3ZbRCRRQG9mOC90X4VD/4Za7mpNAaXKYTiNIIiksylU
      Tcfp8mAxvn3X8YfOwPQAHo+NWCJFrZvDNf6AQqFLoXLdk2Kz2XH5RRbHXVjsZppe3+vwDbNn
      huaL/4rrzud4yOFo2Jn3m7GbNLbPzsm1e8h4cXo8zC0ug2CAyzj5Yh6LqY3uCDCm1WipKmq7
      STYZQzc6Qa+CZMXtdbK4tIwgmdE6duRujbNolkd3301P1IfCAHmBdHLJOF3JwfRYgGatSLbW
      YyLgQjLb6bab2O02StkU1Q7MTo/S7ig47dbX368Wi1g8PiwGkWzynLZmZnrcT/w8QbNRQDXP
      sTpjJ5HMERifwm0RSMQvGJmYppy5wGSzY3P76ZQzVNsas7MzKK1LJLsbpVEima0wNjWD1iyR
      q7aZm5/FeEN46f/63/7n4RzglrhmAI1G44NJhPXLoXGyt00DOw/u3eGXGLRUa1XcLldftAct
      Oe41A+h0OrfeqCG3T66UxeHqz34ARVUwSH3MC9RH/TfRvna0xfLzMr81qxVEhwur4f2YvNUr
      Vaxez40ToWKpRMD/4zJFF3N53H43jXoXs0FFsnox93F29bz0byRK/ckOPWjcnBtUblMo5Enn
      SuhAu1ElkUyjqDJbX/03NsNxOooOusZltUwymaIjqxTPz6l0FRrVEomLFD1Fo9VqUsymKNWa
      1NIH/OP/94JSrUmzVuIilUFWf5kIoXariaLpXJbLKDo0m03S8TiFYpZcqQZAtZglky+jAyen
      p+i6TjmfIV++fB3h2biskrpIUKvXSSbTyKqO2WJB6zWIxjNUsnHqPZ1Go4E2HE6+89xoAL3S
      OYcXVWqZY86SeTa3jtB6dTb3ThDQEUXpyjui9djePUSTG2zvnbz6tka1UqF1mWU3nORwZ4Nq
      W2H/4ABRFEAQEFHY2T2g1+nQ7ik3NeHWqSUjpCqX7D37A7FCi+PwCSgtitU25/sHVErn7MdK
      1LIRIhcVAFqFc06SZaJH2+RrV1GxO1svULQ2X/3xOa16lliySvjw8PVeB13XyMaPSeRqv8h1
      Dfl5/OA6wOjENAuLMzQyF4ieCWbmltB6LbxeD8GxScyGK++EyzvC9Owiktq6+qLSIZnJ0ZG7
      1EpVDHYPi3MzuO0WnG43Xl8Qr9vFwuwk1VKOauOXmXeEpse5ODxmZOUxzdgLJOcogsHO4uIc
      I2475UKR8aVl5ubnaNauNr2Us0nqnS4Whw+r6ep6Hd4RZmamCfj9TEyOIijXDViTu5zH0/gC
      /mGVyPeAHzSA490XfPcyxsL9B9haCb7++iv84/O4fCMcvfyKWueqey9nYnz11dd4x2cxWiwY
      JQl0lW5XxWI1v55XWCwWMHvpFo6JXuQploq0O/JVr/ALIFgCIBfxBcbotGQmJnyYLBYEwGSx
      EJq/Q2rrG55tHjE5O43VamV0fgWpXaPV6SK8WhG4uh4Bm9WCKBowmQxYrTZEUcJqMWN2ePni
      11+SiYaHVSLfA25cB+jkjkkIMywH/8akWO2yE47z4O5yv9o35Aa+PfsjLUt/wqEHLRhugBbC
      PhyG4dC3pz00gPeQ59Fv6dlafdEetLxAAxML9Jfk83mCwSDZZBR7YAan5fYfSrNWRLd4cZiv
      h0OfnaZYWJoFIHOyj3l2Hd9PyLoSb0RINIbrALfBwBiA1muyubWLIlq5Mz/KP//TP7N8/xNG
      jA3OkkUEo41P7y8SPjzgsivx6OESyXiaelvh3voq6ViE0flFLlNRDN4gsaMDZNHOo4ernO1t
      Umr0GJ9bxa5WOLvIM7G4SOzZv1yFQ3/yiIvTQxo9gccf3ycTPyWfTzKxdB+1UUfQIHl2SCJf
      Y2H1Ie3cCelSm5UHj/HZ3518RB8iAxMOHT89ZfzOA+7NO0l8LxwaycjC6n3sBoXceZhIskS3
      UaJy2aTaUFhbXcYgQmjEzsHBCfFcg+rJNsnLLs1aiUL8iJ53mcf3Z6kWKjx/+gJVU8hlq6+z
      QztoUa636BQinGTb2DwhPv3sU1Lnr9ZOlApPX4TRlB65fAkQkESNRrP3Vu/ZIDAwBhAM+Qnv
      vOTlzjmhMS8GucHG/imCKGE2GhBFCbc/hN1iwGp3YDEaMZismF/F5JucIerxPRzj04xOTWLU
      dOxOJw7fGPnjl2ztHCFjYHx8BNFgwuW0Y7VYOdp+Qb7cQBckrFYzmqbTrOR49t13WD1XaVcw
      OBkPOjCYLDgdFmRZRtcVGvX+jPOH/JkBmgRflSYCAUkS0TUNVdeRRAEQ0F+VhtU1DU3n6hj4
      3mKWjqa9Kh8rXE24dAQkvcfJaZxep4rJt8zytAdV1a5Wy4VXJZgkCV1TgavSs3zvHFc1W0XQ
      NVRNQ5Qk0DU0TUeSpBtLN/3T0X+mZMz25y5pOkIf12b6qf8m2sPs0D8bnWqpiIwRv9/zi3Sp
      w+zQt6c9QD3Ah0P0+Btsxv4MjwZtP8Bb9QJdlrJgH8F1zQXZIZVsMjH540KRfw75ZArP5AQ3
      +Vli5+fMzc7+OJ10BnfART7fxGnuYXBP0s9k0qnj/5dG9p/6d4IBQvrtb3/727/8UGmWOYpE
      uciUCY74KeUzXCTSON1WDra2aahGvC4r8ZN9zvMN/C4z+zs7tLHgMKrsbG7R0s3YpR5bm9to
      Jid2g8ru1hY9gx2nVSK8v81xJIZ3bBaHWaJeyrC9F8YVcBPZi5DNJrH7RtHbZba29jC5/Jj1
      LjtbWyhGBzaxy8uXWygGO06jytbmFqrRgdt+c/hGuZBHMFtIn51i9Pop5/NUczmKtTy5Uoeg
      30UsvMt57pKRgI/j42Mmx0eJHO6QqckEfC4EQSCdOOPk+ISeqnN6EsEdCNHrtDCbdM4vypi1
      S7CPUCvmsDkcfQmISxz/jl7j7NZ1B5Ebh6xKPUfXMsq8X+UoVmZ/awPf+CTRgz3Glu/Rujgm
      Fj+jbvCzMjfO6fYGdVVk8/l3pBNndM0+Ai4r2dgxkmcCt83IweYzOoKJ7adfc3Kwj3VihZW5
      8VdnlNk/POfR4weYBA1ZE3n4eJlIOMrGs2cYzAa+/eYpOy+fIksmNr/9hvOTYyTfBG67ie3n
      36EZTWx8/S3dH7rQVoF4rkQ2HeP8okwqlUNQO7hHFzHU8mRTR9RME8z44DByNcGsxPeJFHpk
      TrdIFK+GHIlkmvWHqxwfxlieD5BMVkicn7/Oe6rKHbZePEUx2G8sbzTk3eIHh8ehYxUAAB7d
      SURBVEA2mw1JNCG0dXxjUwQ9Ngo6mAwGLEaJjqxhsZoxGI2oGkwtzrO6OI/DasJaq7K7s8+j
      x+tYLits74axaBIzd+a4Mz9LLnaG02GmUVRe7aHVEA0mJElCFETcXj9GkxmTqNE2WJmbX2J2
      Dk72XjI/N8/S7CwWi4nLWpnt3TBmJJZm51mYnuWHIkHcE9Ns/+sG0ysPKEVfYJ97AuU0fo+N
      nsmE3JMxW82YzBb0mgxAr9tjdGqWWd8ytlc9i9XhxGwy4Xa7MJiMSH+RDF00mPA6Bdo9ue/1
      tob8fG4eAjWKvNg/o9MzcHdtFl1VcLncOO0WDvf20F2j3F2YJnd+TKrUYmlhirOTE5qKiNsC
      p2dxPKFJbGKHSCzJyMQ0C1MBjsPHtDUD83NjHG5v08VEKDSKxWjEqDfZD5/h9IcwChIutxVZ
      hrGAnfBpFMHkYGHST/jolI5uxG5UiEQTBMamWJ4a4fDohK5uJBjw3vijE0QzzXqesZklOs0m
      UzPTSLqGze0CWcE7PUvhZI90pcfq2jK6KjMxM0cmGqZ42SYYDGKURBRZxuVy0pM1PB4HCCZM
      RgG3x4OuCTgcFoLTS7TLaZxu3ys36+0yHALdHjd6gXrlBDlhlCnvcBn+XeTs6N+wGup90R40
      L9DQDfoeMgyHvj3tgQmGexM0Veay3sbj6U8Onjclvv9/cVbf6ou2pmuIQh83xPRR/020B94A
      Tg428U2vEj3Y48mnn1yr81vLRCk2emTb86yM2d9eI/+C1mWCRnbjbTfjg2BgDKBbjPI8Usbr
      D0HtgkpbwT+x9OcboOt0qjle7Bxh943yeH2ZVKXHQsjMv+xtkzlss/7pr0idnvHw0Trb25t4
      BJVEW0WTBT5an+LZ1gm+4AQP15cGJ8rwPWdgnpOuylh8U6zO+Wjj4NdffkGjkLp2jCBJmC0W
      LGYzvUYZg8OPACysPeQ//OouiUiaTudqpaHT6aDrJh5+9hnTPjM9DFjMFiymoePgfWJgDADA
      6XIiima0ToXT02N00/WAMl2UCPgDlIpZUqkswVAQECllL9jfieCfDKJ2Lzk7DXPZue470HWR
      YGiEy3yKztssiDzkJzEwXiBN6SLrRsxGkV67QanWwj8SQJe7SEYzvW4Hi9lEqVjEYLGTjMdZ
      v7+OrsgUSyVEk42A10XzskyjJ+CwmTEKIpLVgtppIxoMlItFTHY3Hqetr9fyzT/+T7QL/9oX
      bV2Hfi5g91P/TbSvGUC1Wh1mhwbQuly2wOV4N6uz1Ot1nE5nX7QHLRz62iS4XzHm7x9OnO9w
      Ndhuq4Dd0J+cqorQ54WwPuq/ifY1AzAY/oZTqNckU9cY9drQBfFWIh3rhSKmkQBv411bLRRx
      jARudIVlslnGRkd/lE4+ncET9FKttLEZFST7CNb+rSWhFP6ZTn67f/p9U+6//k/VvnESrKs9
      IsdHpApVNLlD5PiIi2wZujVimSKH3/wDv/tun3ypTL0toyldao02AI1KnsOjY1qyRrVc4Ozk
      iHKji9JrcXJ0SLpYQ9c1cskYsYscpVSKNlApl9H6OPpqXNaQVY1iJk1Ph1q1Ri6VIpmMcZ4u
      AJBLxojE0+hc7QfQdY10PEI8XXwd8lYp5TgNH1EslTg+PqWr6JitVvRek4tUnlohRVPWqVYq
      w+zQ7wE3GkAxdkxZMSDqKnK3jYrI0dYmnVdf8XrcBMensBs1Tk5jlNJxyo0r9+D+wQF2pwO5
      12N/dxunb4TT8CFyp4UmSJzsvCSfiRKv6LisRlRdIXq4Q7Gp9DVysp1PkChVOd3fIJatcxaN
      gdKiK9ioxM4o5k+JlcHYyxM+v9oaWk+fcpZrkTzZJl25uvqjgwM8ASfPnu7isCicX5Q5CYdf
      Z4fWVIVYeJd8XR5Ggr4H3GgAvplFAiaNSDRBIZumq+gYuj2uIuIFLBYzNocLm9OHQW2QKTcZ
      HbkaNK+urtIs50nnKzh9IwT9fswmiVzyAhkRXe9Sr9QIjE/h83uRdJVqtYbNbu+r9yEwPUH6
      8JjA0kNa5y8wuMYQDHamJ0K47VYuKzVGJicYHR2n27jKu3lZLiKYzISmFvDYrgZKdo+PkYAf
      v8+Lx+dG1K6PxXVdpVatYbU7+utOGXIr3GgArVqZXKGE0WLFarFQq5bQjRaMkgmX3YxzdJ7k
      3tfka12WQnYKqh2rdPWw85kU1XoTm82Gw341qXY47FitFiqlIoLBysjsHQpHT9naPcbo8vPJ
      57+ienHW12zKgsmH2dAkMDKGqhmZGvdiddgRAavDwejCGvn973i+c8rswgwul4vRxbtolQz5
      Uhnt1fjs6ppEXC4HkmTCajHidLmQJCNOhw2b08+Tz39FLR1BHmaHfuf5WesAmtLj5dPvmH/8
      BX5bH2d9Q66Rjf4rHmufskOrGqLUx2C4Puq/ifbALIR9SAzDoW9Pe2CC4d4EXVNpd2Rstp9X
      PPC2kSsvaLfyfdHWNA2lz/UB+qX/JtoDbwCx00M84/NcnJ6w/uD+tXDoZjHORaGJObjI/Ij1
      h0V+YdTmGXKjf+sA/Q5l6qf+T9UeGAPoVZMcXNQwWV1YugUylRYTC2vIvQ6qptNpt+k1y2zt
      HGByh3h0d4lErslMyMy/7W9xIao8+uxT0tEEK6uLhMOHOAWVeK0FWHi0NsnG5gEO/wQP7i4M
      VpThe8zAPCet26SJkzszfkotkV998Qn5eOzaMUq3iyqa8HvdqO0KWD1IwOyd+3zx0Synxymq
      1VclVatVei2VtY8+JmTTaLRbKKKVgPfd2j025K8zMAYAEBgJIIkGlG6TWrWMKl6fMElWO3cW
      F0hET0mlcoyEgoBAr9smk8ji8LvRlC7VYoZ69yr0UJREBEFANDq5uzJPKhKmPQyHfm8YmCGQ
      0T3OBGYESeLB+hLRZImHD++iduqYLCYW7yxhMpqoFOJML9yhXswy7TSjmyYwF8/o2ie5M+Gj
      KIyTLnd5tL6CVTJgAkJTsxjMZmKRU8aX72LvXyzZkFvmmhu03W6/zba8O2htChWFEX9/Qo5/
      LpVSDo+7P3uUFUX520GR76j+m2hfO1rTtOF+AABM+DwmVPXdHMsoukRX68/WS0WXULU+hkP3
      Uf9NtK8ZgN3+t98q9XKOQlNnbnL0xlCXXruBZrBhMb7704tmvY7F6eSmW1atVvF4PD9Kp1oq
      4/A4abV6mCQN0ezE1Mdh0P/2L7/jm0y6fycYIG4Oh9ZUyqUi9WYHdI1apcRls43cbfH0xQYi
      Ct/94Y9kSpVXSWF1Wo0a5VqdSi5OKl+hUmug6zrtxiXlWh1N1+m1m5TK1Su3Y6tOsVRB0a5/
      3i963S6qptNq1FH1q03tqbMolcsqtVeliJqXVSq1OjpwGA6j6zr1WoVavfU6HLrTblIuFWm1
      25RKZRRNRzRIqN1LTs+SlFJnXHav3KrD3vTd58YBU+n8mEhdI+Dx0dRrXFRk5MsSs+sPabW7
      oMpUqxWqtQYjfi+9ap6tcJxAIIhD65IqpEl1a9xbW+E8nkRQ2tQmlqjlEphEjWwlxGXmHK8/
      iMFkJH5yhNEgkq1NcHfux21C+akUYkdoowvEv/7vjH3+P1A9P8Shd0kks7RyRe49mmH7sIDb
      1KE8fheATjnJcbKB3qkwt/aEgNPExrOvCYRCnJ4VmZlwUG6tUE2Guftg6fW5KpkYaUVifXl6
      GBL9jnNjD+Adn8TYa1MoVShWG6ys3uX+nJdyz0ZodJTZ2TnGQqPMzU9hAGq1KhOzd7izOIvR
      bGFxeYXxkI9GOcN5IktL1kGuE4udU232sJgtTI0FqNXKVC/zRE4vqDa7WEz9m3yNz4yTODhm
      ZO0jGmcvkOwhBIOd1bUVxr1OCpkc03fvsbq6TL18tUGmkIyRKZaQNQOSePU2d/pCrKzeYcQf
      YGFxGnrytfMo3Sa7h2eMT4z1pTbAkNvl5nDoRp2u3KMny0xPhHj57GueR5ssBE2YXuW9sVt1
      Xj7fowf4g2OkT3d4tnWALhgQBTAYjLj8E/hdV752m9PP+IgXHTBIArV6nV63hyC5mZxwX33e
      R++DYA0gN1L4/OPUa3XGJvwYXgVOGYxGgnMLxF9+w9ONA8ampjCZTITmlrHqPRAlDK9iTP4U
      bGUyGREFCYMkYjSZEAQRk9GA2e7hN3/3Jefh/b6Gdw+5HYbRoO8h//e3X3Pe6k+NsEHLDTo0
      gPeQYTj07WkPzErwh8ROKkk1ddEX7YHOCzRIlMol/D4/+XQcm38Sh/n2H0q7XkE3u7GZvt8t
      K5xHM8zOTwGQOwtjmlrhp9QieRqPDdcBbomBMQBNabO3s0tPdLA04+e//dd/Zvn+J4yYW0ST
      BUSzgyd35zk9OqAmG3l4b4F0Ksdls8Pa6grZxDmhmVnq2QSSe4REeB/Z6OL+3SXi4R1y1Q5T
      C6vYtBqn5xlmlpc5+fZ31K3jfPHpY1KRQxqykccfrZE6PyWbvWB65QHdWgV9ArLxE2KZCst3
      H9LOR0jkG6w9eIxnuNW0r7z7y7W3RPr0BPfMGstBgUTVxMLSEp88WAEEphbXMOptiskIJ4kC
      lcQBkUyF07MLFhYXMYjglJpE0nViF1ka5/vEyk2y0T2ikTBlcZRH96YpZCu8fP4cWe7wcivM
      3PICDz76FK9VQkCgkT4kUuhhcfj4+JOPiJ0cXjVOq/P8xQFKt8Hm7hHJVJrQ+CRmaehG7TcD
      0wNIkkBbVlFkGdEgoakKqqYjSEZsFhMGyQCITC3fZX3aTU9R6NWnsJuvbpFrYpHDP/wLlol7
      GNQsC3cfs+SVkC8zVEsgd9qoSNjcQT754ku6nQ611BE9RaGaTqJ7J7lnbpPpyUgGI5rcAdHI
      VS4zAffIJJ9/+YhOp4emzNKuJNg/0fn43uTbvG0fPAPTA4wurqIWzrho2lmdcrE8M87mwSne
      QAirUWR0dBT/1AIOucDmfhTBYGEs5H39fUEwMTE1z/xMiODKA4TcMXvHcQzeaZxymoPIBZJk
      ZH1tgc0XL6i2ZIJTS5Sju+ieMbRigqrgZdxjxWGW2diNcO/+XbwT0zhNdtYWfLx48ZKWDI1y
      lliux8pSf1bFh/yZoRv056J22d7coqMZWHvwEJel/53qQSyKaO3PHuVhlcgh7zzDdYDb0x6Y
      OcAPIfe6iAYjiixjMpmvhXirSodiqY7P78doeHdGi//nxnM2S4W+aA9agYyBN4DY6cFVlcj9
      XZ589um16M1KMkZL0ahotneqSmSj16XQaLztZnwQDIwBdHLH/OGwxOTkJN3CGS1VxO6f4fsl
      QZqlJM92TvCMjPN4fYl0XWM5ZOT3e9uk9+ssP/kVqfApn37+mKdPvyUg6SRVCaUp8+T+NN9t
      RQmNTw6rRL5HDNRzGp1bZXXOj2by8+svf4VSL177u8nmxOO0AzrtWgGrewR4VSXy1w/IJfLo
      /HnKJBkdPP7sM+ZHnegWFz6XFVHX+lrnYMjtMlAGYLGYEUULdEs8e/YM0e679ndFkREEkWq1
      SjqdJxj0gyCRON3lu28PGZ8dR2kV2Nh4Qe0vqkQq3R6CZKBeKSMPDeC9YWC8QLquoSMgCgKa
      ql65zIxG0DUEQUTTNERRRJFlEDSOwjHu3VsFXUOWFQRBxGg0oCoyqg6SeJUPSBBFdE1DEECW
      FURRwmDob16U/+P3v2O/WumLtq7rCH2cBfdT/020rxlAsVj8a8cODrpCu6djNb+bcTiNRqNv
      BQ0HOhq0X77lIbdLoVGnp/cnZYuqqfSxPEBf9d9E+3a8QEqHdLnFePB7Y+pOlfMqTLhNYLZx
      U5aUVDrNxPj4rTThTSik0ngmxrnpPX8ejzM7M/OjdPLpDJ6Ai3yhidMsY3BNYO9P2h4AttNJ
      zttDN+htIP32t7/97V9+qMkttjc3aahGbLpMJHpMutQm5PeQv4hwFM0RCgVolNJs7Z3iGwnQ
      VXRMWoutrR16ohWv1OIw3SCx8XuOck3sZhFdsiIpDWptFavZyPHhDrlMFsHmwUyHna0tGqoR
      l1mkWimRyFQI+G6nYG+lWEA0WchEzzB5fFQKBSrZLMXLArlKlxGfi/PjPc5zdYIjXsLhMJPj
      Y5wd7ZKpyYx4XQiCQCYZ5TR8TE+H0+MInpEQcqeN2agRuyhjUmvo9iCXpdxVCaY+jHf3LxJU
      ld6t6w4iN3YYpfgZPZsfv9tKvZDB4J8hqOUJx+NsHCUR2xc83z5l5yTLR4/XELtNYukCsqxg
      s9vZ2tp8pW5ibmaWB59+xojTRDR6TuYijqz/6bQG7j54QPRwh66sYLI5ON1/SbVWZWP7mNnZ
      iVu7UKGR5zxfIpM6I5askExmEdQOzuA8UiVHNnVExTDGjEflMJIFoBLf56wokz3dJlG6ShsZ
      TyRZe7jK0V6U5Xk/Fxdl4rHY67z0qtxh5+VTeqIVaZgV4p3nRgPwTC0w67OytXMISNjtZswW
      I712B7s3yPzqE9bn3RhMNiTJyJ+SOcTPY3hGRrF8bweUIOhoqobR7kPoXVJsqvhdVxVXDGYr
      RknEZJBIxaLY/CGcdjOqBvNLy1huMfzAPTlF5vCQwPx9WucvMPvHwWAj4LVjNpnodXtY7VZM
      Vhvaq7drt9NhZHySh598Qch1Vcrb6nBhMZnweFwYTEYkrjvRRMmI02qmq6gMhHvtPefGX5jc
      bnAeTxAIhgCFg80NIpdW1lcWCZnbhMMReqKLaZ/Os+cvaWomgl4XIwEfidg5Lm8AjDaCXhvB
      +UUS28+ptBTmfBI9+yiGVy9Gp0nj6bMXBKaXCIYCZGNRTA4fVqsNl8N2qxcqGFz4fRYCgSBW
      Z4CpkBuXz4sEOH0+QrNrdJP77EcKLC5MERwZIbiwjlaMETlP8qdiqD6vD5AYCfowGG24nBYC
      wREMBjMBnxu7Z4TV+48QWkWUYVqUd56/uQ5QTV6g+oP4reafdSKl12Tj+R4Pv/gUizgcGvwc
      dqMRsPanbpmqqEh9XMfop/6baA/MQtiHxDAc+va0ByYY7kNiM5mglIj2RVvT9b6mdOyn/pto
      D6wBRKNR5ufniUcOcI3fwWu7/VtRycbRXRP4rmn32Ns5496DVQDOt55iXf2M0E8Y0ZRazeE6
      wC0xMAbQaxT57uUB6CLLq4t8+83XFOs9AlKD7Y1nyLrE332yxu7uAY2OyuMn9zg5OEYx2Hjy
      cJ3zgx1G1+5TjuxjC45xcnSCool89PEj9p9/R0/X8Y6vYFcKZIqXeManKBw8vUqL8vEDouED
      Gs0OD774glL2nG8vc7jGV7DrOjo6x7sbFC7bjM3do505oNYVWLr3hKDr5829hvx1BiYa9CJ6
      wdqTz/n80RSZsvg6LYpotvPwyaeM+ewUUucUa20ktUmx1qalmvn08ToGEaam3JyepsjVZBrR
      Exq6ji43ycUOsc1/wseP7yA3WxyHT0AQKJfqzL9Ki+IyXwVq0c6TKHXwhWb44te/oVlOXDVO
      qRA+zSEIIuVyAYPRhNVqw9DPmIQhwAD1AH6/k+NIBHuvjHf+Cblim0T2evCfw+HG7lKYDrnw
      OMxcutyvd4iZ3FM0n/5nvGu/xi8WsOR0pies+N1mLo7CxN0KMiE8Pi8jE5OYzHZMrRTxZByT
      UwCbh4BaRVY1eo0asdMjBLMHlBIY7Hg9diYmpzDbXKhNEWOvyUUij2/19hYDh/x7BsgLpFMp
      5JBFK0G/m06zRrmhEPDYEI0W5G4Hi8XCZblAowejQR9dWcVmMb/+fqNWw+RwYZIEyoUsXc1E
      yG8ndn5Bu1FEs82zOu0gX6zg8gexmwTyuTzuQJB6qYDRYsFsd9Grl2l0NUZHQ6idFqLFjta+
      pFCp4xsJoXcuqTS6jI6NYrjBZfyfnn5DotP8ZW/fB8o1A6jVasOyPj8ZjdjxES1srNyZu7He
      2G1zeXmJy9WfgtyDFg59zQBkWf5rxw55RyjEYnhM/Zkcq6qCJPVvZNxP/TfRvnb0nxYRlFaF
      qmoj4DRRyBZweWw0O+DzOMjmcujtCtFUCYDJhTVmRr3/XhnQlC65SgOHAUSbi069ji/geyfq
      Zv1pB1i9VsZk92DuQ9oTXdcA4S92KamUipf4A1f3rF7MIXlC/BQvbPO//APKi41bbeug8v+3
      d2ZvbWNnHH5lyYvkDZudGAwJe4DJRpKhDelF/9+2N71oL6bzTObphCSQEIbNgG0M3vcN25Kl
      XkBnnkzINDBx+1DrvZT1/HwknZ/0Hek737n0qmvlJMe5OqATPYpwVi0QT59PwTsKhxken2Vy
      0MfI5MJPnV9vq6TjJxwcRcmmTomcpDCwoMgOcslTSvUG8ZM4RrtFsfy/iF8NkrEjovEMjWqB
      v/z5T+yHT8ilT4lGIhwnshiGQSZ+TOQ0haFrlCtV4vE4bf0iPAQatTINVScZOyKWPL8JlLIJ
      9vYPKNcbNOsl9vcPqLdavPnmr3z3eotKQyUePeIgGscw2oRD++zvhzhTdbLHR5Q1qJdz7IeO
      aLUNqoU0u3sHNDT91w/J5DfzmfcdncOd95SzMWLZyoe/aC3yxQqyw2A3dMKgVydU6ceuFfA5
      Leyd5Bm4+Be1WWfz7TsCUwtf+DD+M7noPomGDU/jkKgxg9vrZaC3h/xxnKajh0zkEI+lTiiW
      QTrLYUj32Ft/y9z9R1gEqJ2GKPEVxdAug30eDvIaYvkQjDnC0RyTt2yEDlLolQgun59X61sM
      9XiQ/YPYUUk0VCrJPcKeP9Bqafi8Dt5sbHFLAowmbzd+pMfv4s3mPkL1hOHxaZpNDYfUwZk1
      Jpc/AURJoq1qGAboCAhYuDP3FSsrK4wOfDhBxWirFPIFWppB/+AwPp+Pgf4BPC6ZX46n1eYZ
      pXoL529MrLsOpVKdW4ERRoOD1CoqTqeTHo8Li10hMDKMx6VQKxVQdQHvcJBeWWRwdJLgkB9B
      gKHJKVJ76zQlL41cBsFqxX9rApdawD82hd/nxWJo5AslLKKN28ExFKeCx9uDWslTqNaxWaFU
      aeDy+ugfDGClcd64do1CWUW0OQkGBpmdnaNaSJLMlP/r56nbuNQA1t4JxMw23794gedWEJvV
      jnLRad1u9/k+DgWHVUS0O5mansQty8iyHatdwWETkWUnomTFrcjYZQWbJNI3PMqT+zMcHnVm
      eZ9fIzg1wd6bl/ywmWBmsh+fQ+Dl5h4OWUGyCChOhf7ABJJaJpfLoWHF5fy5AK1g9SA1a9ya
      GGN0foFWJk6+UETsu0P1YI1X61uoSEyOj5DOZKmetejxD3Cw+ZJKW6RVq1JpCjjtElotx3ff
      /oOBsRkcLjc2m4/giINMNkejpZFKnFIsN5CVzmR8mvxMF30H6BBanbW1DRqqyu2FxwR6v+w8
      hsuI/e3vuPP5jmj/++VAp+ik/nW0zbIoNxCzLMqX0zbLotxQOnWtNE3r6ILlndS/jraZbWXy
      AZ2sCtdp/etomwYw+YBOhj+d1r+OtmkAk66ma9Kh/9/IHO/yYySNt2+Ue/MTCEApHWVjJ4rs
      7efhwm021l5SVy0sPnqM/xel6gxDY+vNK/LVFlNLjxjxO8Ew2H//mlShxsj0PYI+ke+/+ZaJ
      r//IWM/VXslWMsesb0ewuft4+mAeAVCrGV682kaSPXz95C7vf3hFTWvTG5hmbuLzFwQ0dJV3
      r9co1VVm7z9l0OsAw2Dn7Uuy5TMCc49QzhKETjLogpXl5WVk6+XhkfkEuJHohBNlnq+uYq2l
      qV9U5TqMJFlZXcUn1YnHIihD86zcu0M4lvxIoVnO03YNsfrsISeH4fONrSKFtpdnz1fJHu/T
      arW5PR5Aa181JcMgfJzk8e+e0adXKGjnW3d2wjxZXWV2QCCaVVlcXuHpwyWKhau9fTzLpxD9
      QVZ//4Bo6GJudDNHWejn2fPnpMM7DAanWXnyGLdV40z9dB1V0wA3Eh1JtCMAsl1EveifuiRh
      FcBqt9NuNpBkGclux2h/3AHaWhuHzYYgOpAsF1nAmoooy4AFUZJQPD3YrtVDDAQkRIuASxZp
      XBhAEyUcFrArClpTp5o/Ye1diKW7s1dS1zQdh8OOIClIwkWJSLWJqCg/tb2t1llf+ycV1YZ8
      WWHaC0wD3EhEUEsUa3WSRRWnZGAYBm5UEsUa2UweT/8Ahfgx6XgC2fXx+mYOp0I2naKSidG2
      +TAMA8PhoZE5pV7J0tCl8zUVDAND1684T0TAJrXIFCpEsg389vP2DTgMDtNlYscpfD2wc5Dh
      0fIDZOvVBq+K20k6kaCUDGPIfedtVHycpWLUy2mahp1iscrS8gr9jha5cuPTLTW/BN88stks
      Po/C5uY2Y7OL+O0q8ZzKcJ/CztZ7eoNzDPkU0rFDUnWR+ekJxEtC4HLmhINElcW7M1QzcWy9
      Iwj1DNuHSRaWFqgkwxzE0oDE9OIiva7PHwcY7Rbb77fwjU4x0mPlJFUhMNJLaOsd1t4xxnvt
      rG1s0dYN/MPjzIwPX+kcFJJRItkmi/NTlFKnyP0B9HKS3UiGpXsLNIspdkMReobGmQwOfTIF
      3zTADaSThbG6DTMEMulqTAOYdDWmAUy6GtMAJl2NaQCTrsY0gElXYxrApKsxDWDS1ZgGMOlq
      TAOYdDWmAUy6GtMAJl3NvwCwms7ehwgiFAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 3' width='192'>
      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
      y+mSUgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Sheet 4' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sheet 5' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
